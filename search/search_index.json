{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Inferfuzzy \ud83d\udd17 Inferfuzzy es una biblioteca de Python para implementar Sistemas de Inferencia Difusa . Empezando \ud83d\udd17 Instalaci\u00f3n \ud83d\udd17 pip install inferfuzzy Uso \ud83d\udd17 Creaci\u00f3n de variables ling\u00fc\u00edsticas y sus conjuntos difusos asociados. variable_1 = Var ( \"variable_name_1\" ) variable_1 += \"set_name_1\" , ZMembership ( 1 , 2 ) variable_1 += \"set_name_2\" , GaussianMembership ( 3 , 2 ) variable_1 += \"set_name_3\" , SMembership ( 4 , 6 ) variable_2 = Var ( \"variable_name_2\" ) variable_2 += \"set_name_4\" , GammaMembership ( 70 , 100 ) variable_2 += \"set_name_5\" , LambdaMembership ( 40 , 60 , 80 ) variable_2 += \"set_name_6\" , LMembership ( 30 , 50 ) Declarar las reglas sem\u00e1nticas y el m\u00e9todo de inferencia a utilizar. mamdani = MamdaniSystem ( defuzz_func = centroid_defuzzification ) mamdani += variable_1 . into ( \"set_name_1\" ) | variable_1 . into ( \"set_name_3\" ), variable_2 . into ( \"set_name_5\" ) mamdani += variable_1 . into ( \"set_name_2\" ), variable_2 . into ( \"set_name_4\" ) Usando el m\u00e9todo de inferencia difusa para valores ingresados por el usuario. variable_1_val = float ( input ()) mamdani_result : float = mamdani . infer ( variable_name_1 = variable_1_val )[ \"variable_name_2\" ]","title":"Introducci\u00f3n"},{"location":"#inferfuzzy","text":"Inferfuzzy es una biblioteca de Python para implementar Sistemas de Inferencia Difusa .","title":"Inferfuzzy"},{"location":"#empezando","text":"","title":"Empezando"},{"location":"#instalacion","text":"pip install inferfuzzy","title":"Instalaci\u00f3n"},{"location":"#uso","text":"Creaci\u00f3n de variables ling\u00fc\u00edsticas y sus conjuntos difusos asociados. variable_1 = Var ( \"variable_name_1\" ) variable_1 += \"set_name_1\" , ZMembership ( 1 , 2 ) variable_1 += \"set_name_2\" , GaussianMembership ( 3 , 2 ) variable_1 += \"set_name_3\" , SMembership ( 4 , 6 ) variable_2 = Var ( \"variable_name_2\" ) variable_2 += \"set_name_4\" , GammaMembership ( 70 , 100 ) variable_2 += \"set_name_5\" , LambdaMembership ( 40 , 60 , 80 ) variable_2 += \"set_name_6\" , LMembership ( 30 , 50 ) Declarar las reglas sem\u00e1nticas y el m\u00e9todo de inferencia a utilizar. mamdani = MamdaniSystem ( defuzz_func = centroid_defuzzification ) mamdani += variable_1 . into ( \"set_name_1\" ) | variable_1 . into ( \"set_name_3\" ), variable_2 . into ( \"set_name_5\" ) mamdani += variable_1 . into ( \"set_name_2\" ), variable_2 . into ( \"set_name_4\" ) Usando el m\u00e9todo de inferencia difusa para valores ingresados por el usuario. variable_1_val = float ( input ()) mamdani_result : float = mamdani . infer ( variable_name_1 = variable_1_val )[ \"variable_name_2\" ]","title":"Uso"},{"location":"conclusions/","text":"Conclusiones \ud83d\udd17 En este escrito se muestra las l\u00edneas generales de c\u00f3mo utilizar Inferfuzzy, adem\u00e1s de que muestra la capacidad de los sistemas de inferencia difusos para afrontar problem\u00e1ticas donde la definici\u00f3n utilizando la l\u00f3gica cl\u00e1sica no est\u00e9 clara o que la soluci\u00f3n utilizando esta sea demasiado engorrosa.","title":"Conclusiones"},{"location":"conclusions/#conclusiones","text":"En este escrito se muestra las l\u00edneas generales de c\u00f3mo utilizar Inferfuzzy, adem\u00e1s de que muestra la capacidad de los sistemas de inferencia difusos para afrontar problem\u00e1ticas donde la definici\u00f3n utilizando la l\u00f3gica cl\u00e1sica no est\u00e9 clara o que la soluci\u00f3n utilizando esta sea demasiado engorrosa.","title":"Conclusiones"},{"location":"features/","text":"Caracter\u00edsticas del Sistema de Inferencia \ud83d\udd17 La biblioteca contiene implementados los m\u00e9todos de inferencia Mamdani y Larsen . Pero es posible implementar partiendo de una base com\u00fan otros m\u00e9todos de inferencia. Los m\u00e9todos de inferencia reciben una funci\u00f3n de defuzzificaci\u00f3n . La biblioteca contiene implementadas Centroide , Bisectriz , M\u00e1ximo Central , M\u00e1ximo m\u00e1s peque\u00f1o y M\u00e1ximo m\u00e1s grande . Durante el proceso de definici\u00f3n de los conjuntos difusos esto requieren una funci\u00f3n de membres\u00eda que puede ser implementada o utilizar una de las disponibles en la biblioteca. Funciones de membres\u00eda implementadas en Inferfuzzy : Funci\u00f3n Gamma Funci\u00f3n Lambda o Triangular Funci\u00f3n Pi o Trapezoidal Funci\u00f3n S Funci\u00f3n Z Funci\u00f3n Gaussiana La T-conorm y T-norm utilizadas en las reglas de inferencia, as\u00ed como el m\u00e9todo de agregaci\u00f3n de los conjuntos son posibles de sobrescribir, por defecto, son m\u00ednimo , m\u00e1ximo y m\u00e1ximo respectivamente. Es posible definir m\u00e1s de una variable de salida para el sistema de inferencia difusa implementado en la biblioteca.","title":"Caracter\u00edsticas"},{"location":"features/#caracteristicas-del-sistema-de-inferencia","text":"La biblioteca contiene implementados los m\u00e9todos de inferencia Mamdani y Larsen . Pero es posible implementar partiendo de una base com\u00fan otros m\u00e9todos de inferencia. Los m\u00e9todos de inferencia reciben una funci\u00f3n de defuzzificaci\u00f3n . La biblioteca contiene implementadas Centroide , Bisectriz , M\u00e1ximo Central , M\u00e1ximo m\u00e1s peque\u00f1o y M\u00e1ximo m\u00e1s grande . Durante el proceso de definici\u00f3n de los conjuntos difusos esto requieren una funci\u00f3n de membres\u00eda que puede ser implementada o utilizar una de las disponibles en la biblioteca. Funciones de membres\u00eda implementadas en Inferfuzzy : Funci\u00f3n Gamma Funci\u00f3n Lambda o Triangular Funci\u00f3n Pi o Trapezoidal Funci\u00f3n S Funci\u00f3n Z Funci\u00f3n Gaussiana La T-conorm y T-norm utilizadas en las reglas de inferencia, as\u00ed como el m\u00e9todo de agregaci\u00f3n de los conjuntos son posibles de sobrescribir, por defecto, son m\u00ednimo , m\u00e1ximo y m\u00e1ximo respectivamente. Es posible definir m\u00e1s de una variable de salida para el sistema de inferencia difusa implementado en la biblioteca.","title":"Caracter\u00edsticas del Sistema de Inferencia"},{"location":"implementation/","text":"Estructura de la Implementaci\u00f3n \ud83d\udd17 La implementaci\u00f3n se sostiene sobre 7 clases fundamentales: Membership BaseSet BaseVar BaseRule Predicate VarSet InferenceSystem Membership \ud83d\udd17 Es la clase encargada de representar una funci\u00f3n de membres\u00eda junto a los puntos (llamados items internamente) class Membership : def __init__ ( self , function : Callable [[ Any ], Any ], items : list ): self . function = function self . items = items def __call__ ( self , value : Any ): return self . function ( value ) BaseSet \ud83d\udd17 Es la clase encargada de representar un conjunto difuso. Recibe como par\u00e1metros un objeto de tipo Membership representando la funci\u00f3n de membres\u00eda del conjunto y un m\u00e9todo de agregaci\u00f3n. class BaseSet : def __init__ ( self , name : str , membership : Membership , aggregation : Callable [[ Any , Any ], Any ], ): self . name = name self . membership = membership self . aggregation = aggregation def __add__ ( self , arg : \"BaseSet\" ): memb = Membership ( lambda x : self . aggregation ( self . membership ( x ), arg . membership ( x ), ), self . membership . items + arg . membership . items , ) return BaseSet ( f \"( { self . name } )_union_( { arg . name } )\" , memb , aggregation = self . aggregation , ) BaseVar \ud83d\udd17 Es la clase encargada de representar una variable ling\u00fc\u00edstica. Recibe como par\u00e1metros una funci\u00f3n de uni\u00f3n, una funci\u00f3n de intercepci\u00f3n y una lista de objetos de tipo BaseSet representando los conjuntos difusos de la variable. class BaseVar : def __init__ ( self , name : str , union : Callable [[ Any , Any ], Any ], inter : Callable [[ Any , Any ], Any ], sets : Optional [ List [ BaseSet ]] = None , ): self . name = name self . sets = { set . name : set for set in sets } if sets else {} self . union = union self . inter = inter def into ( self , set : Union [ BaseSet , str ]) -> VarSet : set_name = set . name if isinstance ( set , BaseSet ) else set if set_name not in self . sets : raise KeyError ( f \"Set { set_name } not found into var { self . name } \" ) temp_set = self . sets [ set_name ] return VarSet ( self , temp_set , self . union , self . inter ) BaseRule \ud83d\udd17 Es la clase encargada de representar una regla de inferencia. Recibe como par\u00e1metro un objeto de tipo Predicate representando el antecedente de la regla. class BaseRule : def __init__ ( self , antecedent : Predicate ): self . antecedent = antecedent def __call__ ( self , values : dict ): raise NotImplementedError () BaseRule no contiene consecuencias porque las consecuencias de todos los tipos de reglas no son de la misma estructura. La clase Rule hereda de BaseRule y representa las reglas en los que el sistema produce un conjunto o m\u00e1s como resultado. class Rule ( BaseRule ): def __init__ ( self , antecedent : Predicate , consequences : List [ VarSet ]): super ( Rule , self ) . __init__ ( antecedent ) self . consequences = consequences def aggregate ( self , set : BaseSet , value : Any ) -> BaseSet : raise NotImplementedError () def __call__ ( self , values : dict ): value = self . antecedent ( values ) return { consequence . var . name : self . aggregate ( consequence . set , value , ) for consequence in self . consequences } Predicate \ud83d\udd17 Es la clase encargada de representar a los antecedentes. De ella heredan cuatro clases: AndPredicate , OrPredicate , NotPredicate y VarSet . Las primeras tres para representar las relaciones l\u00f3gicas de uni\u00f3n, intercepci\u00f3n y negaci\u00f3n; y la \u00faltima representa la inclusi\u00f3n de una variable en un determinado conjunto, siendo esta la clase b\u00e1sica para representar a los antecedentes. class Predicate : def __init__ ( self , union : Callable [[ Any , Any ], Any ], inter : Callable [[ Any , Any ], Any ], ) -> None : self . union = union self . inter = inter def __call__ ( self , values : dict ): raise NotImplementedError () def __and__ ( self , other : \"Predicate\" ): return AndPredicate ( self , other , self . union , self . inter ) def __or__ ( self , other : \"Predicate\" ): return OrPredicate ( self , other , self . union , self . inter ) def __invert__ ( self ): return NotPredicate ( self , self . union , self . inter ) VarSet \ud83d\udd17 class VarSet ( Predicate ): def __init__ ( self , var : \"BaseVar\" , set : BaseSet , union : Callable [[ Any , Any ], Any ], inter : Callable [[ Any , Any ], Any ], ): super ( VarSet , self ) . __init__ ( union , inter ) self . var = var self . set = set def __call__ ( self , values : dict ): return self . set . membership ( values [ self . var . name ]) InferenceSystem \ud83d\udd17 Es la clase encargada de representar el sistema de inferencia. Recibe como par\u00e1metros las reglas y una funci\u00f3n de defuzzificaci\u00f3n y con el m\u00e9todo infer permite realizar la inferencia seg\u00fan los valores prove\u00eddos. class InferenceSystem : def __init__ ( self , rules : Optional [ List [ BaseRule ]] = None , defuzz_func : Optional [ Callable [[ BaseSet ], Any ]] = None , ): self . rules = rules if rules else [] self . defuzz_func = defuzz_func def infer ( self , values : dict , defuzz_func : Optional [ Callable [[ BaseSet ], Any ]] = None , ) -> Dict [ str , Any ]: if not self . rules : raise Exception ( \"Empty rules\" ) if self . defuzz_func is None and defuzz_func is None : raise Exception ( \"Defuzzification not found\" ) func = self . defuzz_func if defuzz_func is None else defuzz_func set : Dict [ str , BaseSet ] = self . rules [ 0 ]( values ) for rule in self . rules [ 1 :]: temp : Dict [ str , BaseSet ] = rule ( values ) for key in temp : set [ key ] += temp [ key ] result : Dict [ str , Any ] = {} for key in set : result [ key ] = func ( set [ key ]) return result","title":"Implementaci\u00f3n"},{"location":"implementation/#estructura-de-la-implementacion","text":"La implementaci\u00f3n se sostiene sobre 7 clases fundamentales: Membership BaseSet BaseVar BaseRule Predicate VarSet InferenceSystem","title":"Estructura de la Implementaci\u00f3n"},{"location":"implementation/#membership","text":"Es la clase encargada de representar una funci\u00f3n de membres\u00eda junto a los puntos (llamados items internamente) class Membership : def __init__ ( self , function : Callable [[ Any ], Any ], items : list ): self . function = function self . items = items def __call__ ( self , value : Any ): return self . function ( value )","title":"Membership"},{"location":"implementation/#baseset","text":"Es la clase encargada de representar un conjunto difuso. Recibe como par\u00e1metros un objeto de tipo Membership representando la funci\u00f3n de membres\u00eda del conjunto y un m\u00e9todo de agregaci\u00f3n. class BaseSet : def __init__ ( self , name : str , membership : Membership , aggregation : Callable [[ Any , Any ], Any ], ): self . name = name self . membership = membership self . aggregation = aggregation def __add__ ( self , arg : \"BaseSet\" ): memb = Membership ( lambda x : self . aggregation ( self . membership ( x ), arg . membership ( x ), ), self . membership . items + arg . membership . items , ) return BaseSet ( f \"( { self . name } )_union_( { arg . name } )\" , memb , aggregation = self . aggregation , )","title":"BaseSet"},{"location":"implementation/#basevar","text":"Es la clase encargada de representar una variable ling\u00fc\u00edstica. Recibe como par\u00e1metros una funci\u00f3n de uni\u00f3n, una funci\u00f3n de intercepci\u00f3n y una lista de objetos de tipo BaseSet representando los conjuntos difusos de la variable. class BaseVar : def __init__ ( self , name : str , union : Callable [[ Any , Any ], Any ], inter : Callable [[ Any , Any ], Any ], sets : Optional [ List [ BaseSet ]] = None , ): self . name = name self . sets = { set . name : set for set in sets } if sets else {} self . union = union self . inter = inter def into ( self , set : Union [ BaseSet , str ]) -> VarSet : set_name = set . name if isinstance ( set , BaseSet ) else set if set_name not in self . sets : raise KeyError ( f \"Set { set_name } not found into var { self . name } \" ) temp_set = self . sets [ set_name ] return VarSet ( self , temp_set , self . union , self . inter )","title":"BaseVar"},{"location":"implementation/#baserule","text":"Es la clase encargada de representar una regla de inferencia. Recibe como par\u00e1metro un objeto de tipo Predicate representando el antecedente de la regla. class BaseRule : def __init__ ( self , antecedent : Predicate ): self . antecedent = antecedent def __call__ ( self , values : dict ): raise NotImplementedError () BaseRule no contiene consecuencias porque las consecuencias de todos los tipos de reglas no son de la misma estructura. La clase Rule hereda de BaseRule y representa las reglas en los que el sistema produce un conjunto o m\u00e1s como resultado. class Rule ( BaseRule ): def __init__ ( self , antecedent : Predicate , consequences : List [ VarSet ]): super ( Rule , self ) . __init__ ( antecedent ) self . consequences = consequences def aggregate ( self , set : BaseSet , value : Any ) -> BaseSet : raise NotImplementedError () def __call__ ( self , values : dict ): value = self . antecedent ( values ) return { consequence . var . name : self . aggregate ( consequence . set , value , ) for consequence in self . consequences }","title":"BaseRule"},{"location":"implementation/#predicate","text":"Es la clase encargada de representar a los antecedentes. De ella heredan cuatro clases: AndPredicate , OrPredicate , NotPredicate y VarSet . Las primeras tres para representar las relaciones l\u00f3gicas de uni\u00f3n, intercepci\u00f3n y negaci\u00f3n; y la \u00faltima representa la inclusi\u00f3n de una variable en un determinado conjunto, siendo esta la clase b\u00e1sica para representar a los antecedentes. class Predicate : def __init__ ( self , union : Callable [[ Any , Any ], Any ], inter : Callable [[ Any , Any ], Any ], ) -> None : self . union = union self . inter = inter def __call__ ( self , values : dict ): raise NotImplementedError () def __and__ ( self , other : \"Predicate\" ): return AndPredicate ( self , other , self . union , self . inter ) def __or__ ( self , other : \"Predicate\" ): return OrPredicate ( self , other , self . union , self . inter ) def __invert__ ( self ): return NotPredicate ( self , self . union , self . inter )","title":"Predicate"},{"location":"implementation/#varset","text":"class VarSet ( Predicate ): def __init__ ( self , var : \"BaseVar\" , set : BaseSet , union : Callable [[ Any , Any ], Any ], inter : Callable [[ Any , Any ], Any ], ): super ( VarSet , self ) . __init__ ( union , inter ) self . var = var self . set = set def __call__ ( self , values : dict ): return self . set . membership ( values [ self . var . name ])","title":"VarSet"},{"location":"implementation/#inferencesystem","text":"Es la clase encargada de representar el sistema de inferencia. Recibe como par\u00e1metros las reglas y una funci\u00f3n de defuzzificaci\u00f3n y con el m\u00e9todo infer permite realizar la inferencia seg\u00fan los valores prove\u00eddos. class InferenceSystem : def __init__ ( self , rules : Optional [ List [ BaseRule ]] = None , defuzz_func : Optional [ Callable [[ BaseSet ], Any ]] = None , ): self . rules = rules if rules else [] self . defuzz_func = defuzz_func def infer ( self , values : dict , defuzz_func : Optional [ Callable [[ BaseSet ], Any ]] = None , ) -> Dict [ str , Any ]: if not self . rules : raise Exception ( \"Empty rules\" ) if self . defuzz_func is None and defuzz_func is None : raise Exception ( \"Defuzzification not found\" ) func = self . defuzz_func if defuzz_func is None else defuzz_func set : Dict [ str , BaseSet ] = self . rules [ 0 ]( values ) for rule in self . rules [ 1 :]: temp : Dict [ str , BaseSet ] = rule ( values ) for key in temp : set [ key ] += temp [ key ] result : Dict [ str , Any ] = {} for key in set : result [ key ] = func ( set [ key ]) return result","title":"InferenceSystem"},{"location":"references/","text":"Referencias \ud83d\udd17 Sistemas de Control con Lo\u0301gica Difusa: Me\u0301todos de Mamdani y de Takagi-Sugeno-Kang (TSK). Autor: Samuel Diciembre Sanahuja Temas de Simulaci\u00f3n. Autor: Dr. Luciano Garc\u00eda Garrido First Course on Fuzzy Theory and Applications. Autor: Kwang H. Lee","title":"Referencias"},{"location":"references/#referencias","text":"Sistemas de Control con Lo\u0301gica Difusa: Me\u0301todos de Mamdani y de Takagi-Sugeno-Kang (TSK). Autor: Samuel Diciembre Sanahuja Temas de Simulaci\u00f3n. Autor: Dr. Luciano Garc\u00eda Garrido First Course on Fuzzy Theory and Applications. Autor: Kwang H. Lee","title":"Referencias"},{"location":"usage/","text":"Ejemplo de como utilizar Inferfuzzy \ud83d\udd17 Como ejemplo se utilizar\u00e1 el siguiente problema. Se desea inferir el por ciento de la cantidad de un determinado producto que se ha vendido en un d\u00eda en un restaurante, cafeter\u00eda, etc. Por ejemplo, el producto Pollo , se desea conocer bajo determinadas condiciones que por ciento del Pollo sacado del almac\u00e9n dispuesto para venderse ese d\u00eda se termina vendiendo. Para la implementaci\u00f3n se seleccionaron 4 variables ling\u00fc\u00edsticas. Las primeras 3 de entrada y la \u00faltima de salida. Cantidad de platos o derivados del producto que se vende. Por ejemplo, retomando el ejemplo del Pollo , si se vender\u00eda Pollo Frito y Pollo Asado , la variable valdr\u00eda 2 . A esta variable le llamaremos variety . Baja: low <= 2 . Funci\u00f3n de Membres\u00eda: Z Normal: 1 <= normal <= 5 . Funci\u00f3n de Membres\u00eda: Gaussiana Alta: high >= 4 . Funci\u00f3n de Membres\u00eda: S Por ciento que representa la variable variety del total de platos o derivados de productos que se vende. Por ejemplo, si se vende Pollo Frito , Pollo Asado , Pescado y Cerdo la variable valdr\u00eda 50 . A esta variable se le llamar\u00e1 diversity . Baja: low >= 70 . Funci\u00f3n de Membres\u00eda: Gamma Normal: 40 <= normal <= 80 . Funci\u00f3n de Membres\u00eda: Lambda Alta: high <= 50 . Funci\u00f3n de Membres\u00eda: L Por ciento de la utilizaci\u00f3n del local, si es 100 es que el local siempre est\u00e1 lleno, si es 0 es que no asiste ning\u00fan cliente al establecimiento. A esta variable se le llamar\u00e1 clients . Baja: low <= 40 . Funci\u00f3n de Membres\u00eda: L Normal: 30 <= normal <= 90 . Funci\u00f3n de Membres\u00eda: Lambda Alta: high >= 80 . Funci\u00f3n de Membres\u00eda: Gamma Por ciento de la cantidad del producto que se vendi\u00f3 en el d\u00eda, si es 100 fue se vendi\u00f3 todo al final del d\u00eda, si es 50 fue que no se vendi\u00f3 la mitad de la cantidad. A esta variable se le llamar\u00e1 sales . Baja: low <= 60 . Funci\u00f3n de Membres\u00eda: L Normal: 30 <= normal <= 90 . Funci\u00f3n de Membres\u00eda: Lambda Alta: high >= 90 . Funci\u00f3n de Membres\u00eda: Gamma Declaraci\u00f3n de las variables ling\u00fc\u00edsticas y sus conjuntos difusos en Inferfuzzy \ud83d\udd17 variety_var = Var ( \"variety\" ) variety_var += \"low\" , ZMembership ( 1 , 2 ) variety_var += \"normal\" , GaussianMembership ( 3 , 2 ) variety_var += \"high\" , SMembership ( 4 , 6 ) diversity_percent_var = Var ( \"diversity\" ) diversity_percent_var += \"low\" , GammaMembership ( 70 , 100 ) diversity_percent_var += \"normal\" , LambdaMembership ( 40 , 60 , 80 ) diversity_percent_var += \"high\" , LMembership ( 30 , 50 ) clients_percent_var = Var ( \"clients\" ) clients_percent_var += \"low\" , LMembership ( 20 , 40 ) clients_percent_var += \"normal\" , LambdaMembership ( 30 , 60 , 90 ) clients_percent_var += \"high\" , GammaMembership ( 80 , 100 ) sales_percent_var = Var ( \"sales\" ) sales_percent_var += \"low\" , LMembership ( 20 , 60 ) sales_percent_var += \"normal\" , LambdaMembership ( 30 , 60 , 90 ) sales_percent_var += \"high\" , GammaMembership ( 90 , 100 ) Gr\u00e1ficos de pertenencia de los conjuntos por cada variable \ud83d\udd17 Reglas de Inferencia \ud83d\udd17 variety diversity clients sales low low low low low low normal normal low low high high low normal low low low normal normal low low normal high normal low high low low low high normal low low high high normal normal low low low normal low normal normal normal low high high normal normal low low normal normal normal normal normal normal high normal normal high low low normal high normal low normal high high normal high low low low high low normal normal high low high high high normal low low high normal normal low high normal high high high high low low high high normal low high high high normal Declaraci\u00f3n de las Reglas de Inferencia en Inferfuzzy \ud83d\udd17 mamdani = MamdaniSystem ( defuzz_func = centroid_defuzzification , ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"high\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"high\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"high\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"high\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"normal\" ) De manera an\u00e1loga ser\u00eda para Larsen utilizando la clase LarsenSystem . Resultados \ud83d\udd17 Variety Value: 10 Diversity Percent: 50 Clients Percent: 50 Mamdani: 35 .11% Larsen 32 .82% Variety Value: 2 Diversity Percent: 100 Clients Percent: 100 Mamdani: 96 .22% Larsen 100 .00% Variety Value: 4 Diversity Percent: 40 Clients Percent: 100 Mamdani: 60 .00% Larsen 60 .00% An\u00e1lisis de los Resultados \ud83d\udd17 De los resultados, se puede observar que los m\u00e9todos de Mamdani y Larsen obtienen resultados similares. A primera vista no es posible validar si los resultados se asemejan a la realidad, para esto es imprescindible la colaboraci\u00f3n de un experto en el tema para la correcta definici\u00f3n de las variables, la asignaci\u00f3n de las funciones de membres\u00eda m\u00e1s correctas as\u00ed\u0301 como la definici\u00f3n de las reglas asociadas.","title":"Ejemplo"},{"location":"usage/#ejemplo-de-como-utilizar-inferfuzzy","text":"Como ejemplo se utilizar\u00e1 el siguiente problema. Se desea inferir el por ciento de la cantidad de un determinado producto que se ha vendido en un d\u00eda en un restaurante, cafeter\u00eda, etc. Por ejemplo, el producto Pollo , se desea conocer bajo determinadas condiciones que por ciento del Pollo sacado del almac\u00e9n dispuesto para venderse ese d\u00eda se termina vendiendo. Para la implementaci\u00f3n se seleccionaron 4 variables ling\u00fc\u00edsticas. Las primeras 3 de entrada y la \u00faltima de salida. Cantidad de platos o derivados del producto que se vende. Por ejemplo, retomando el ejemplo del Pollo , si se vender\u00eda Pollo Frito y Pollo Asado , la variable valdr\u00eda 2 . A esta variable le llamaremos variety . Baja: low <= 2 . Funci\u00f3n de Membres\u00eda: Z Normal: 1 <= normal <= 5 . Funci\u00f3n de Membres\u00eda: Gaussiana Alta: high >= 4 . Funci\u00f3n de Membres\u00eda: S Por ciento que representa la variable variety del total de platos o derivados de productos que se vende. Por ejemplo, si se vende Pollo Frito , Pollo Asado , Pescado y Cerdo la variable valdr\u00eda 50 . A esta variable se le llamar\u00e1 diversity . Baja: low >= 70 . Funci\u00f3n de Membres\u00eda: Gamma Normal: 40 <= normal <= 80 . Funci\u00f3n de Membres\u00eda: Lambda Alta: high <= 50 . Funci\u00f3n de Membres\u00eda: L Por ciento de la utilizaci\u00f3n del local, si es 100 es que el local siempre est\u00e1 lleno, si es 0 es que no asiste ning\u00fan cliente al establecimiento. A esta variable se le llamar\u00e1 clients . Baja: low <= 40 . Funci\u00f3n de Membres\u00eda: L Normal: 30 <= normal <= 90 . Funci\u00f3n de Membres\u00eda: Lambda Alta: high >= 80 . Funci\u00f3n de Membres\u00eda: Gamma Por ciento de la cantidad del producto que se vendi\u00f3 en el d\u00eda, si es 100 fue se vendi\u00f3 todo al final del d\u00eda, si es 50 fue que no se vendi\u00f3 la mitad de la cantidad. A esta variable se le llamar\u00e1 sales . Baja: low <= 60 . Funci\u00f3n de Membres\u00eda: L Normal: 30 <= normal <= 90 . Funci\u00f3n de Membres\u00eda: Lambda Alta: high >= 90 . Funci\u00f3n de Membres\u00eda: Gamma","title":"Ejemplo de como utilizar Inferfuzzy"},{"location":"usage/#declaracion-de-las-variables-linguisticas-y-sus-conjuntos-difusos-en-inferfuzzy","text":"variety_var = Var ( \"variety\" ) variety_var += \"low\" , ZMembership ( 1 , 2 ) variety_var += \"normal\" , GaussianMembership ( 3 , 2 ) variety_var += \"high\" , SMembership ( 4 , 6 ) diversity_percent_var = Var ( \"diversity\" ) diversity_percent_var += \"low\" , GammaMembership ( 70 , 100 ) diversity_percent_var += \"normal\" , LambdaMembership ( 40 , 60 , 80 ) diversity_percent_var += \"high\" , LMembership ( 30 , 50 ) clients_percent_var = Var ( \"clients\" ) clients_percent_var += \"low\" , LMembership ( 20 , 40 ) clients_percent_var += \"normal\" , LambdaMembership ( 30 , 60 , 90 ) clients_percent_var += \"high\" , GammaMembership ( 80 , 100 ) sales_percent_var = Var ( \"sales\" ) sales_percent_var += \"low\" , LMembership ( 20 , 60 ) sales_percent_var += \"normal\" , LambdaMembership ( 30 , 60 , 90 ) sales_percent_var += \"high\" , GammaMembership ( 90 , 100 )","title":"Declaraci\u00f3n de las variables ling\u00fc\u00edsticas y sus conjuntos difusos en Inferfuzzy"},{"location":"usage/#graficos-de-pertenencia-de-los-conjuntos-por-cada-variable","text":"","title":"Gr\u00e1ficos de pertenencia de los conjuntos por cada variable"},{"location":"usage/#reglas-de-inferencia","text":"variety diversity clients sales low low low low low low normal normal low low high high low normal low low low normal normal low low normal high normal low high low low low high normal low low high high normal normal low low low normal low normal normal normal low high high normal normal low low normal normal normal normal normal normal high normal normal high low low normal high normal low normal high high normal high low low low high low normal normal high low high high high normal low low high normal normal low high normal high high high high low low high high normal low high high high normal","title":"Reglas de Inferencia"},{"location":"usage/#declaracion-de-las-reglas-de-inferencia-en-inferfuzzy","text":"mamdani = MamdaniSystem ( defuzz_func = centroid_defuzzification , ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"high\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"low\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"high\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"normal\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"normal\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"low\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"high\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"normal\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"high\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"low\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"normal\" ) ), sales_percent_var . into ( \"low\" ) mamdani += ( variety_var . into ( \"high\" ) & diversity_percent_var . into ( \"high\" ) & clients_percent_var . into ( \"high\" ) ), sales_percent_var . into ( \"normal\" ) De manera an\u00e1loga ser\u00eda para Larsen utilizando la clase LarsenSystem .","title":"Declaraci\u00f3n de las Reglas de Inferencia en Inferfuzzy"},{"location":"usage/#resultados","text":"Variety Value: 10 Diversity Percent: 50 Clients Percent: 50 Mamdani: 35 .11% Larsen 32 .82% Variety Value: 2 Diversity Percent: 100 Clients Percent: 100 Mamdani: 96 .22% Larsen 100 .00% Variety Value: 4 Diversity Percent: 40 Clients Percent: 100 Mamdani: 60 .00% Larsen 60 .00%","title":"Resultados"},{"location":"usage/#analisis-de-los-resultados","text":"De los resultados, se puede observar que los m\u00e9todos de Mamdani y Larsen obtienen resultados similares. A primera vista no es posible validar si los resultados se asemejan a la realidad, para esto es imprescindible la colaboraci\u00f3n de un experto en el tema para la correcta definici\u00f3n de las variables, la asignaci\u00f3n de las funciones de membres\u00eda m\u00e1s correctas as\u00ed\u0301 como la definici\u00f3n de las reglas asociadas.","title":"An\u00e1lisis de los Resultados"}]}